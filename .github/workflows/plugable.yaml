name: plugable
on: 
  push: {}
  pull_request:
    types:
      - opened
      - reopened
env:
  BUILD_PYTHON_VERSION: "3.10"
jobs:
  run-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
      - name: Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Upgrade pip to latest
        run: python3 -m pip install --upgrade pip
      - name: Get pip cache dir
        id: pip-cache
        run: echo "::set-output name=dir::$(pip cache dir)"
      - name: Cache Pip
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: pip-${{ runner.os }}-${{ matrix.python-version }} }}
      - name: Cache Poetry
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry
          key: poetry-cache-${{ runner.os }}-${{ matrix.python-version }} }}
      - name: Cache Packages
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Run test cases & lint checks
        run: make test
      - name: Convert coverage data into LCOV format 
        run: poetry run coverage lcov
      - name: Send code coverage results to Coveralls
        uses: coverallsapp/github-action@v1.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./coverage.lcov
          parallel: true
  sync-coverage:
    runs-on: ubuntu-latest
    needs: run-tests
    steps:
      - name: Let Coveralls know that all tests have finished
        uses: coverallsapp/github-action@v1.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel-finished: true
  build-pkg:
    runs-on: ubuntu-latest
    needs: sync-coverage
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
      - name: Install Python ${{ env.BUILD_PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.BUILD_PYTHON_VERSION }}
      - name: Upgrade pip to latest
        run: python3 -m pip install --upgrade pip
      - name: Get pip cache dir
        id: pip-cache
        run: echo "::set-output name=dir::$(pip cache dir)"
      - name: Cache Pip
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: pip-${{ runner.os }}-${{ env.BUILD_PYTHON_VERSION }} }}
      - name: Cache Poetry
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry
          key: poetry-cache-${{ runner.os }}-${{ env.BUILD_PYTHON_VERSION }} }}
      - name: Cache Packages
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}-${{ env.BUILD_PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
      - name: Build packages
        run: make build
      - name: Upload package artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-pkgs
          path: dist/
  publish-pkg:
    runs-on: ubuntu-latest
    needs: build-pkg
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: dist-pkgs
      - name: Publish packages to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1.5
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip_existing: true
