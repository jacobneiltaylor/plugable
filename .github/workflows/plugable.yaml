name: Plugable CI/CD Pipeline
on: 
  push: {}
  pull_request:
    types:
      - opened
      - reopened
env:
  BUILD_PYTHON_VERSION: "3.10"
jobs:
  test:
    name: "Run unit, formatting, and linting tests"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
      - name: Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Upgrade pip to latest
        run: python3 -m pip install --upgrade pip
      - name: Get pip cache dir
        id: pip-cache
        run: echo "::set-output name=dir::$(pip cache dir)"
      - name: Setup pip cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: pip-${{ runner.os }}-${{ matrix.python-version }} }}
      - name: Setup Poetry cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry
          key: poetry-cache-${{ runner.os }}-${{ matrix.python-version }} }}
      - name: Setup package cache
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Run test cases & lint checks
        run: make test
      - name: Convert coverage data into LCOV format 
        run: poetry run coverage lcov
      - name: Send code coverage results to Coveralls
        uses: coverallsapp/github-action@v1.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./coverage.lcov
          parallel: true

  coverage:
    name: "Finalise parallel coverage upload"
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Let Coveralls know that all tests have finished
        uses: coverallsapp/github-action@v1.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel-finished: true

  build:
    name: "Build packages"
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install Python ${{ env.BUILD_PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.BUILD_PYTHON_VERSION }}
      - name: Upgrade pip to latest
        run: python3 -m pip install --upgrade pip
      - name: Get pip cache dir
        id: pip-cache
        run: echo "::set-output name=dir::$(pip cache dir)"
      - name: Setup pip cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: pip-${{ runner.os }}-${{ env.BUILD_PYTHON_VERSION }} }}
      - name: Setup Poetry cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry
          key: poetry-cache-${{ runner.os }}-${{ env.BUILD_PYTHON_VERSION }} }}
      - name: Setup package cache
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}-${{ env.BUILD_PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install Poetry
        run: make install
      - name: Determine package version
        id: pkg-ver
        run: "echo ::set-output name=semver::$(poetry run python3 ./scripts/determine_version.py $(git describe --tags))"
      - name: Save version to file
        run: echo "${{ steps.pkg-ver.outputs.semver }}" > VERSION
      - name: Set version
        run: poetry version ${{ steps.pkg-ver.outputs.semver }}
      - name: Build packages
        run: make build
      - name: Upload package artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-pkgs
          path: dist/
      - name: Upload version artifact
        uses: actions/upload-artifact@v3
        with:
          name: version-file
          path: VERSION

  prerelease:
    name: "Release new candidate version"
    runs-on: "ubuntu-latest"
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: build
    steps:
      - name: Download version file
        uses: actions/download-artifact@v3
        with:
          name: version-file
      - name: Download built packages
        uses: actions/download-artifact@v3
        with:
          name: dist-pkgs
      - name: Read package version
        id: pkg-ver
        run: "echo ::set-output name=semver::$(cat VERSION)"
      - uses: "marvinpinto/action-automatic-releases@v1.2.1"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "${{ steps.pkg-ver.outputs.semver }}"
          prerelease: true
          title: "Prerelease Build: ${{ steps.pkg-ver.outputs.semver }}"
          files: |
            LICENSE
            dist/*

  release:
    name: "Release new version"
    runs-on: "ubuntu-latest"
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    needs: build
    steps:
      - name: Download version file
        uses: actions/download-artifact@v3
        with:
          name: version-file
      - name: Download built packages
        uses: actions/download-artifact@v3
        with:
          name: dist-pkgs
      - name: Read package version
        id: pkg-ver
        run: "echo ::set-output name=semver::$(cat VERSION)"
      - uses: "marvinpinto/action-automatic-releases@v1.2.1"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "${{ steps.pkg-ver.outputs.semver }}"
          prerelease: false
          title: "Release Build: ${{ steps.pkg-ver.outputs.semver }}"
          files: |
            LICENSE
            dist/*

  publish:
    name: "Publish new release to PyPI"
    runs-on: ubuntu-latest
    needs: release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    steps:
      - name: Download built packages
        uses: actions/download-artifact@v3
        with:
          name: dist-pkgs
      - name: Publish packages to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1.5
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip_existing: true
